%naslov
Svojstva statickog koda za pregled na osnovi masinskog ucenja

% uvod
% mozda nista ovde?
% *chapter.+1

Rad [ovaj] predlaze resenje za generisanje trening skupa za algoritam masinskog ucenja  na osnovu
izvornog koda kako bi se napravio inteligentni metod detekcije gresaka.

Bitno je prvo definisati kakvim tipovima gresaka se posvecuje paznja u okviru metode.
Iako postoje i drukcije greske, vrsena je selekcija njih prema vaznosti, odnosno prema tome
koliku stetu mogu da uzrokuju i mogucnost da budu detektovane racunarskim alatom.
% moze se navesti iz koje knjige su uzete !!!!


Prekoracenje bafera

Upravljanje memorijom

Dereferenciranje Null pokazivaca

Kontrola toka

Konverzija oznacene celobrojne vrednosti u neoznacenu

Iskoriscen je WEKA softver koji je kolekcija algoritama masinskog ucenja.
Bogat skup funkcionalnosti koje pruza WEKA ukljucuje:
%lista
Pretprocesiranje podataka i vizuelizacija
Selekcija atributa
Algoritmi klasifikacije
Algoritmi predvidjanja
Algoritmi klasterovanja
Pravila asocijacije
Tehnike evaluacije

Od kojih su za dati problem najbitniji selekcija atributa i razni algoritmi klasifikacije i predvidjanja.
Prvi prikazuju koji od brojnih elemenata ulaznog vektora su zapravo ukljuceni u proces donosenja odluke, a koji nisu, dok
drugi klasifikuju odnosno predvidjaju ispravnost na osnovu ulaza.
Medjutim, najbitnija prednost koju pruza WAKA u odnosu na ostale dostupne alate je mogucnost da se okristi
jedan standardizovani format ulaza za algoritme ucenja. To omogucava da se koristi jedan ulaz kako bi se isprobale
razne mogucnosti. Ulaz koji koristi WAKA je u formatu ARFF.

ARFF datoteke se sastoje od nabrajanja tipova atributa odnosno njihovih imena i tipova, a potom su navedene sve instance skupa koji se pohranjuje u algoritme.

Glavni problem koji se resava se moze podeliti u tri potproblema koji su:
%list
1. Kako transofmisati izvorni kod u odgovarajuci format za klasifikatore?
2. Kako trenirati te klasifikatore i koje podatke treba koristiti?
3. Koje su karakteristike potrebne algoritmu i koji je najbolji za dati problem?

Odgovor na prvo pitanje je softver "CMore", program koji moze da pretvori izvorni kod programskog
jezika C u skup osnovnih funkcija. Glavna ideja je da treba da bude u mogucnosti da prati tok izvrsavanja programa
i uhvati stanja svih ukljucenih promenljivih. Posto su uhvacena sva stanja moguce je otkriti vise vrsta mogucih
gresaka pristupa memoriji.
Na slici (slika) je prikazan osnovni tok izvrsavanja programa CMore.
Prvi (levi) deo izvrsavanja je ucitavanje datoteke u memoriju i njena obrada kako bi se izvukli
razni elementi i ubacili u skladiste nazvano "Mozak".
Mozak sadrzi listu svih poznatih tipova, struktura, konstanti, globalnih promenljivih unutar analizirane datoteke,
ali najbitnije je sto prati sve funkcije i njihove parametre.

Odmah nakon zavrsenog prvog dela nastupa drugi. U njemu se prati tok izvrsavanja i odredjuje
priroda svake naredbe, sto bi moglo biti dodela, deklaracija, poziv funkcije ili nesto drugo.
Sve vreme mora da se motri na sve sakupljene informacije i da se po potrebi dopisuje na kraj ARFF fajla
(koji je ulaz za algoritme masinskog ucenja).

% Slika primera izlaza ARFF mozda?

Za treniranje je potrebna velika kolicina razlicitih izvornih kodova, a pritom je potrebno obeleziti greske i imati verzije koda kod kojih je uklonjena greska.

Izvorni kodovi od kojih se prave ulazi za treniranje su pokupljeni sa javno dostupnih repozitorijuma, sto je dvostruko zgodno:
velika kolicina datoteka se skupi na taj nacin, a pritom je moguce dobiti primere sa greskom i bez greske tako sto se posmatraju razlicite verzije datoteka.

Program CMore je generisao izlaz u ARFF formatu, ali on zapravo nema razumevanje sta je to greska, nego razume tok izvrsavanja i pruza podatke
za dalje korake.
Na prvi pogled je dovoljno uzeti izlaz programa CMore za datoteku sa greskom i bez nje, ali on nema uvid u to sta je greska nego analizira celu datoteku i zato
generise izlaze koji mogu imati vise hiljada linija od koji je vecina ispravna.
Potrebno je izdvojiti samo one linije koda koje su dovele do greske i njihove parove bez te greske.

Za tu svrhu se koristi program "Holmes" koji uporedjuje dve datoteke i na izlazu se dobiju dve nove datoteke koje sadrze samo potrebne ARFF instance.

Cim se svi modei masinskog ucenja istreniraju vrsi se analiza pogodnosti
koja vraca listu pogodnih modela tako sto analizira njihovu preciznost, stopu laznih pozitivnih i laznih negativnih.

U nastavku su prikazani rezultati poredjenja oko 71 klasifikatora, a na slikama su prikazani samo oni koji su se najbolje pokazali.

Slika preciznost (puna)             slika preciznost (smanjena)

Medju 7 najboljih klasifikatora se nalaze tri zasnovana na najblizim susedima (“Ib1”, “Ibk”, “NNge”), tri zasovana na stablu
(“LMT”, “RotationForest” i “ADABoost” primenjen na “BFTree”) i jedan zasnovan na neuralnim mrezama ("MultiLayerPerceptron").

Slika lazni pozitivi                slika lazni pozitivi

slika lazni negativi                slika lazni negativi
